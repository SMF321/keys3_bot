from aiogram import types
from aiogram.dispatcher import FSMContext
import re

from loader import dp

from states.bot_states import Register
from keyboards.default.bot_button import user_menu_button, add_button, help_button,back_button_or_not, back_add
from utils.db_api.main import *
#import GET_SUGGESTIONS, GET_DESCRIPTION,POST_USER_DATA, POST_USER,UPDATE__USER_DATA_USER,POST_QUESTION,POST_CLASS_QUESTION,POST_PHONE


@dp.message_handler(state=Register.user_start, content_types=types.ContentTypes.ANY)
async def bot_echo_all(message: types.Message, state: FSMContext):
    if message.chat.id in GET_BAN():
        await message.answer('‚ùóÔ∏è–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–º–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º‚ùóÔ∏è')
    else:
        if message.text == user_menu_button[0]:
            await message.answer(f"–î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ü–µ–ª–µ–π:")
            await Register.user_start.set()
            await message.answer(f"ü§î –ú–µ–Ω—é ü§î", reply_markup=add_button(user_menu_button))
        elif message.text == user_menu_button[1]:
            await message.answer(f"‚ùóÔ∏è –ü–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º —Ç–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π‚ùóÔ∏è",reply_markup=add_button(help_button))
            await Register.project_list.set()
            # await message.answer(f"–ú–µ–Ω—é:", reply_markup=add_button(user_menu_button))
        elif message.text == user_menu_button[2]:
            await message.answer(f"üìú–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–πüìú:")
            for i in range(len(GET_QUESTION(message.chat.id)[0])):
                await message.answer(f"–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è : {(GET_QUESTION(message.chat.id)[1][i])}\n" + f"–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è : {(GET_QUESTION(message.chat.id)[0][i])}")
            await Register.user_start.set()
            await message.answer(f"ü§î –ú–µ–Ω—é ü§î", reply_markup=add_button(user_menu_button))


@dp.message_handler(state=Register.project_list, content_types=types.ContentTypes.ANY)
async def fio_regular(message: types.Message, state: FSMContext):
    try:
        POST_USER_DATA(message.chat.id, message.chat.username)
    except:
        pass
    await message.answer('üìÑ–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–¥–ª–æ–∂–µ–Ω–∏–πüìÑ:', reply_markup=add_button(GET_SUGGESTIONS()).add(back_add))
    await Register.info_about_work.set()


@dp.message_handler(state=Register.info_about_work, content_types=types.ContentTypes.ANY)
async def bot_echo_all(message: types.Message, state: FSMContext):
    if message.text in GET_SUGGESTIONS():
        POST_TEST(message.chat.id)
        POST_CLASS_QUESTION(message.chat.id,message.text)
        await message.answer(GET_DESCRIPTION(message.text))
        await message.answer('üìù–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –æ —Å–µ–±–µüìù\n(–ù–∞–ø—Ä–∏–º–µ—Ä : –Ø —Å–∞–º—ã–π –ª—É—á—à–∏–π —Ä–∞–±–æ—Ç–Ω–∏–∫, –≤–ª–∞–¥–µ—é 5 —è–∑—ã–∫–∞–º–∏.)')
        await Register.quesion.set()
    elif message.text == '–ù–∞–∑–∞–¥':
        await Register.user_start.set()
        await message.answer(f"ü§î –ú–µ–Ω—é ü§î", reply_markup=add_button(user_menu_button))
    else:
        await message.answer('–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–¥–ª–æ–∂–µ–Ω–∏–π:', reply_markup=add_button(GET_SUGGESTIONS()).add(back_add))
        await Register.info_about_work.set()
    

@dp.message_handler(state=Register.info_about_concrete_work, content_types=types.ContentTypes.ANY)
async def bot_echo_all(message: types.Message, state: FSMContext):
    if message.text == back_button_or_not[1]:
        await Register.user_start.set()
        await message.answer(f"ü§î –ú–µ–Ω—é ü§î", reply_markup=add_button(user_menu_button))
    elif message.text == back_button_or_not[0]:
        await message.answer('üìù–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –æ —Å–µ–±–µüìù\n(–ù–∞–ø—Ä–∏–º–µ—Ä : –Ø —Å–∞–º—ã–π –ª—É—á—à–∏–π —Ä–∞–±–æ—Ç–Ω–∏–∫, –≤–ª–∞–¥–µ—é 5 —è–∑—ã–∫–∞–º–∏.)')
        await Register.quesion.set()








@dp.message_handler(state=Register.quesion, content_types=types.ContentTypes.ANY)
async def fio_regular(message: types.Message, state: FSMContext):
    POST_QUESTION(message.chat.id, message.text)
    POST_QUESTION_DELETE()
    await message.answer('üéä –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ\nüì¨ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n‚ùì –ü–æ –∏–Ω—Ç–µ—Ä–∏—Å—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å—é–¥–∞.\nhttps://t.me/Text_project')
    await Register.user_start.set()
    await message.answer(f"ü§î –ú–µ–Ω—é ü§î", reply_markup=add_button(user_menu_button))

    
